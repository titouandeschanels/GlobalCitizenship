// service-worker.js

import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute } from 'workbox-precaching';

// Precache all assets generated by the build process.
precacheAndRoute(self.__WB_MANIFEST);

// Cache pages with Stale-While-Revalidate strategy
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new StaleWhileRevalidate({
    cacheName: 'pages-cache',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 14 * 24 * 60 * 60, // 2 weeks
      }),
    ],
  })
);

// Cache static assets with CacheFirst strategy
registerRoute(
  ({ request }) => request.destination === 'style' ||
                   request.destination === 'script' ||
                   request.destination === 'image',
  new CacheFirst({
    cacheName: 'static-assets-cache',
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 14 * 24 * 60 * 60, // 2 weeks
      }),
    ],
  })
);

// Log essential information to the console
self.addEventListener('install', event => {
  console.log('Service worker installing...');
});

self.addEventListener('activate', event => {
  console.log('Service worker activating...');
  event.waitUntil(clients.claim());
});

self.addEventListener('fetch', event => {
  console.log('Fetching:', event.request.url);
});

// Auto-update the service worker
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
